#!/bin/bash

# üöÄ Script de D√©ploiement GitHub - Garage Management System
# ============================================================
# Ce script automatise le processus de push vers GitHub

echo "üöÄ Garage Management System - D√©ploiement GitHub"
echo "================================================="
echo

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rifier si Git est install√©
if ! command -v git &> /dev/null; then
    print_error "Git n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

print_status "Git est install√©"

# V√©rifier si on est dans un repository Git
if [ ! -d ".git" ]; then
    print_warning "Pas de repository Git d√©tect√©. Initialisation..."
    git init
    print_status "Repository Git initialis√©"
fi

# V√©rifier la configuration Git
git_name=$(git config user.name)
git_email=$(git config user.email)

if [ -z "$git_name" ] || [ -z "$git_email" ]; then
    print_warning "Configuration Git manquante"
    echo
    echo "üìã Configurez Git avec vos informations:"
    echo "git config --global user.name \"Votre Nom\""
    echo "git config --global user.email \"votre.email@example.com\""
    echo
    read -p "Voulez-vous configurer Git maintenant? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "Entrez votre nom: " user_name
        read -p "Entrez votre email: " user_email
        git config --global user.name "$user_name"
        git config --global user.email "$user_email"
        print_status "Configuration Git mise √† jour"
    else
        print_error "Configuration Git requise pour continuer"
        exit 1
    fi
else
    print_status "Git configur√© (Utilisateur: $git_name <$git_email>)"
fi

# V√©rifier l'√©tat du repository
echo
print_info "V√©rification de l'√©tat du repository..."
git status --porcelain > /dev/null

# Afficher les fichiers modifi√©s s'il y en a
if [ -n "$(git status --porcelain)" ]; then
    print_warning "Fichiers modifi√©s d√©tect√©s:"
    git status --short
    echo
fi

# Demander le nom du repository GitHub
echo
echo "üåê Configuration du repository GitHub"
echo "======================================"
read -p "Entrez votre nom d'utilisateur GitHub: " github_username
read -p "Entrez le nom du repository (par d√©faut: garage-management-system): " repo_name

# Utiliser le nom par d√©faut si vide
if [ -z "$repo_name" ]; then
    repo_name="garage-management-system"
fi

# URL du repository
repo_url="https://github.com/$github_username/$repo_name.git"

print_info "Repository URL: $repo_url"

# V√©rifier si le remote origin existe d√©j√†
if git remote get-url origin &> /dev/null; then
    current_origin=$(git remote get-url origin)
    print_warning "Remote origin existe d√©j√†: $current_origin"
    read -p "Voulez-vous le remplacer? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git remote set-url origin "$repo_url"
        print_status "Remote origin mis √† jour"
    fi
else
    git remote add origin "$repo_url"
    print_status "Remote origin ajout√©"
fi

# Pr√©parer les fichiers pour le commit
echo
print_info "Pr√©paration des fichiers..."

# Ajouter tous les fichiers
git add .
print_status "Fichiers ajout√©s √† l'index"

# V√©rifier s'il y a quelque chose √† committer
if git diff --cached --quiet; then
    print_warning "Aucune modification √† committer"
else
    # Cr√©er un commit de d√©ploiement
    commit_message="deploy: mise en production du syst√®me de gestion de garage

Fonctionnalit√©s compl√®tes:
- Gestion clients et v√©hicules avec galerie photos
- Syst√®me de r√©parations et rendez-vous
- Authentification et gestion des utilisateurs
- Facturation et param√®tres configurables
- Interface moderne React + TypeScript
- Base de donn√©es locale avec persistance

Date de d√©ploiement: $(date '+%Y-%m-%d %H:%M:%S')"

    git commit -m "$commit_message"
    print_status "Commit cr√©√© avec succ√®s"
fi

# S'assurer que la branche principale est 'main'
current_branch=$(git branch --show-current)
if [ "$current_branch" != "main" ]; then
    print_info "Renommage de la branche vers 'main'"
    git branch -M main
fi

# Instructions pour GitHub
echo
echo "üîß Instructions GitHub"
echo "======================"
print_info "1. Cr√©ez un repository sur GitHub:"
echo "   - Allez sur https://github.com/new"
echo "   - Nom: $repo_name"
echo "   - Description: Syst√®me de gestion de garage avec React et TypeScript"
echo "   - Public ou Private selon vos besoins"
echo "   - ‚ö†Ô∏è  NE PAS initialiser avec README (le code existe d√©j√†)"

echo
read -p "Avez-vous cr√©√© le repository sur GitHub? (y/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo
    print_info "Push vers GitHub en cours..."
    
    # Tenter le push
    if git push -u origin main; then
        print_status "Push r√©ussi!"
        echo
        echo "üéâ D√©ploiement termin√© avec succ√®s!"
        echo "üìç Votre code est maintenant disponible sur:"
        echo "   $repo_url"
        echo
        echo "üîç V√©rifiez que tout est correct sur GitHub:"
        echo "   - Tous les fichiers sont pr√©sents"
        echo "   - Le README.md s'affiche correctement"
        echo "   - Aucun fichier sensible n'est expos√©"
    else
        print_error "√âchec du push"
        echo
        print_info "Causes possibles:"
        echo "   - Repository GitHub non cr√©√©"
        echo "   - Nom d'utilisateur incorrect"
        echo "   - Permissions insuffisantes"
        echo
        print_info "Solutions:"
        echo "   - V√©rifiez l'URL: $repo_url"
        echo "   - Cr√©ez le repository sur GitHub"
        echo "   - V√©rifiez vos permissions"
    fi
else
    echo
    print_warning "Cr√©ez d'abord le repository sur GitHub, puis ex√©cutez:"
    echo "git push -u origin main"
fi

# Commandes utiles
echo
echo "üõ†Ô∏è  Commandes Git utiles pour la suite"
echo "======================================"
echo "git status                    # Voir l'√©tat des fichiers"
echo "git add .                     # Ajouter tous les fichiers"
echo "git commit -m \"message\"       # Faire un commit"
echo "git push origin main          # Pousser vers GitHub"
echo "git pull origin main          # R√©cup√©rer les modifications"
echo

# Prochaines √©tapes
echo "üéØ Prochaines √©tapes recommand√©es"
echo "=================================="
echo "1. üìñ Consultez DEPLOYMENT.md pour le d√©ploiement serveur"
echo "2. üîß Configurez GitHub Actions pour CI/CD (optionnel)"
echo "3. üë• Invitez des collaborateurs si n√©cessaire"
echo "4. üåê Activez GitHub Pages pour une d√©mo (optionnel)"
echo "5. üìä Cr√©ez des Issues pour organiser le d√©veloppement"

echo
print_status "Script termin√©. Bon d√©veloppement! üöÄ"